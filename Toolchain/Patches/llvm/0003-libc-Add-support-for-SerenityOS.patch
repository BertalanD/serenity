From b1b8ca27c4ef6566e2589593044a75f4f26e0df6 Mon Sep 17 00:00:00 2001
From: Daniel Bertalan <dani@danielbertalan.dev>
Date: Fri, 11 Feb 2022 21:42:39 +0100
Subject: [PATCH 3/7] [libc++] Add support for SerenityOS

This commit teaches libc++ about what features are available in our
LibC, namely:
- We do not have locale support, so no-op shims should be used in place
  of the C locale API.
- The number of errno constants defined by us is given by the value of
  the `ELAST` macro.
- Multithreading is implemented though the pthread library.
- Aligned memory allocation is provided by the MSVCRT-like
  `_aligned_{malloc,free}` functions.

Adds a hack for a header not found error when including
`<initializer_list>` inside the SerenityOS kernel.
---
 libcxx/include/__config                   | 3 ++-
 libcxx/include/__locale                   | 2 +-
 libcxx/include/__support/newlib/xlocale.h | 4 ++--
 libcxx/include/initializer_list           | 2 ++
 libcxx/include/locale                     | 2 +-
 libcxx/include/new                        | 4 ++--
 libcxx/src/include/config_elast.h         | 2 ++
 7 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/libcxx/include/__config b/libcxx/include/__config
index 97e33f315..32b6d55dc 100644
--- a/libcxx/include/__config
+++ b/libcxx/include/__config
@@ -1148,6 +1148,7 @@ extern "C" _LIBCPP_FUNC_VIS void __sanitizer_annotate_contiguous_container(
       defined(__sun__) || \
       defined(__MVS__) || \
       defined(_AIX) || \
+      defined(__serenity__) || \
       (defined(__MINGW32__) && __has_include(<pthread.h>))
 #    define _LIBCPP_HAS_THREAD_API_PTHREAD
 #  elif defined(__Fuchsia__)
@@ -1242,7 +1243,7 @@ extern "C" _LIBCPP_FUNC_VIS void __sanitizer_annotate_contiguous_container(
 
 #if defined(__BIONIC__) || defined(__CloudABI__) || defined(__NuttX__) ||      \
     defined(__Fuchsia__) || defined(__wasi__) || defined(_LIBCPP_HAS_MUSL_LIBC) || \
-    defined(__MVS__) || defined(__OpenBSD__)
+    defined(__MVS__) || defined(__OpenBSD__) || defined(__serenity__)
 #define _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE
 #endif
 
diff --git a/libcxx/include/__locale b/libcxx/include/__locale
index ad742997d..10c196e46 100644
--- a/libcxx/include/__locale
+++ b/libcxx/include/__locale
@@ -31,7 +31,7 @@
 #elif defined(__sun__)
 # include <xlocale.h>
 # include <__support/solaris/xlocale.h>
-#elif defined(_NEWLIB_VERSION)
+#elif defined(_NEWLIB_VERSION) || defined(__serenity__)
 # include <__support/newlib/xlocale.h>
 #elif defined(__OpenBSD__)
 # include <__support/openbsd/xlocale.h>
diff --git a/libcxx/include/__support/newlib/xlocale.h b/libcxx/include/__support/newlib/xlocale.h
index b75f9263a..f5ffb9003 100644
--- a/libcxx/include/__support/newlib/xlocale.h
+++ b/libcxx/include/__support/newlib/xlocale.h
@@ -9,7 +9,7 @@
 #ifndef _LIBCPP_SUPPORT_NEWLIB_XLOCALE_H
 #define _LIBCPP_SUPPORT_NEWLIB_XLOCALE_H
 
-#if defined(_NEWLIB_VERSION)
+#if defined(_NEWLIB_VERSION) || defined(__serenity__)
 
 #include <cstdlib>
 #include <clocale>
@@ -22,6 +22,6 @@
 #include <__support/xlocale/__strtonum_fallback.h>
 #endif
 
-#endif // _NEWLIB_VERSION
+#endif // _NEWLIB_VERSION || __serenity__
 
 #endif
diff --git a/libcxx/include/initializer_list b/libcxx/include/initializer_list
index ea1f23467..45631ac2f 100644
--- a/libcxx/include/initializer_list
+++ b/libcxx/include/initializer_list
@@ -43,7 +43,9 @@ template<class E> const E* end(initializer_list<E> il) noexcept; // constexpr in
 */
 
 #include <__config>
+#if !defined(__serenity__) || !defined(KERNEL)
 #include <cstddef>
+#endif
 
 #if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #pragma GCC system_header
diff --git a/libcxx/include/locale b/libcxx/include/locale
index 8e584005d..f29f3453e 100644
--- a/libcxx/include/locale
+++ b/libcxx/include/locale
@@ -206,7 +206,7 @@ template <class charT> class messages_byname;
 
 #if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
 // Most unix variants have catopen.  These are the specific ones that don't.
-#  if !defined(__BIONIC__) && !defined(_NEWLIB_VERSION)
+#  if !defined(__BIONIC__) && !defined(_NEWLIB_VERSION) && !defined(__serenity__)
 #    define _LIBCPP_HAS_CATOPEN 1
 #    include <nl_types.h>
 #  endif
diff --git a/libcxx/include/new b/libcxx/include/new
index aefc08c16..7ee71d16b 100644
--- a/libcxx/include/new
+++ b/libcxx/include/new
@@ -310,7 +310,7 @@ inline _LIBCPP_INLINE_VISIBILITY void __libcpp_deallocate_unsized(void* __ptr, s
 // Returns the allocated memory, or `nullptr` on failure.
 inline _LIBCPP_INLINE_VISIBILITY
 void* __libcpp_aligned_alloc(std::size_t __alignment, std::size_t __size) {
-#if defined(_LIBCPP_MSVCRT_LIKE)
+#if defined(_LIBCPP_MSVCRT_LIKE) || (defined(__serenity__) && !defined(KERNEL))
   return ::_aligned_malloc(__size, __alignment);
 #else
   void* __result = nullptr;
@@ -322,7 +322,7 @@ void* __libcpp_aligned_alloc(std::size_t __alignment, std::size_t __size) {
 
 inline _LIBCPP_INLINE_VISIBILITY
 void __libcpp_aligned_free(void* __ptr) {
-#if defined(_LIBCPP_MSVCRT_LIKE)
+#if defined(_LIBCPP_MSVCRT_LIKE) || (defined(__serenity__) && !defined(KERNEL))
   ::_aligned_free(__ptr);
 #else
   ::free(__ptr);
diff --git a/libcxx/src/include/config_elast.h b/libcxx/src/include/config_elast.h
index 7880c733f..87b25cf42 100644
--- a/libcxx/src/include/config_elast.h
+++ b/libcxx/src/include/config_elast.h
@@ -33,6 +33,8 @@
 #define _LIBCPP_ELAST 4095
 #elif defined(__APPLE__)
 // No _LIBCPP_ELAST needed on Apple
+#elif defined(__serenity__)
+// No _LIBCPP_ELAST needed on SerenityOS
 #elif defined(__sun__)
 #define _LIBCPP_ELAST ESTALE
 #elif defined(__MVS__)
-- 
2.35.1

